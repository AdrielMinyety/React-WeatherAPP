{"version":3,"sources":["components/Form.js","components/Alert.js","components/CardClima.js","App.js","serviceWorker.js","index.js"],"names":["Form","obtenerDatos","useState","ciudad","pais","busqueda","guardarbusqueda","handleChange","e","target","name","value","onSubmit","preventDefault","className","type","id","placeholder","onChange","Alert","mensaje","tipo","tipoAlert","role","CardClima","climaBusqueda","main","weather","description","humidity","parseInt","temp","temp_min","temp_max","App","component","guardarCiudad","guardarPais","error","guardarError","guardarClimaBusqueda","useEffect","a","url","fetch","resultado","json","clima","consultarApi","cod","style","maxWidth","datos","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ef583c3.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction Form({obtenerDatos}) {\r\n\r\n    const [busqueda, guardarbusqueda] = useState({\r\n        ciudad : \"\",\r\n        pais : \"\"\r\n    })\r\n\r\n    const handleChange = e => {\r\n        guardarbusqueda({\r\n            ...busqueda,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    const hacerBusqueda = e => {\r\n        e.preventDefault();\r\n        obtenerDatos(busqueda);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ hacerBusqueda }>\r\n            <div className=\"input-group\">\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"ciudad\" \r\n                    id=\"ciudad\"\r\n                    placeholder=\"City\"\r\n                    className=\"form-control font-weight-bold mb-4\"\r\n                    onChange={ handleChange }\r\n                    />\r\n            </div>\r\n            <div className=\"input-group\">\r\n                <select onChange={ handleChange } name=\"pais\" className=\"custom-select font-weight-bold\">\r\n                    <option value=\"\">-- Choose country --</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"DO\">Republica Dominicana</option>\r\n                    <option value=\"VE\">Venezuela</option>\r\n                    <option value=\"CO\">Colombia</option>\r\n                    <option value=\"MX\">México</option>\r\n                    <option value=\"ES\">España</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"input-group\">\r\n                <input \r\n                    className=\"btn btn-success btn-block text-dark mt-4 font-weight-bold\"\r\n                    type=\"submit\" \r\n                    value=\"What´s the weather like?\"\r\n                />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nfunction Alert ({mensaje, tipo}) {\r\n    let tipoAlert = `alert alert-${tipo} font-weight-bold`;\r\n    return(\r\n        <div className={tipoAlert} role=\"alert\">\r\n           {mensaje}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react';\r\n\r\nfunction CardClima ({climaBusqueda}) {\r\n\r\n    const { name, main, weather } = climaBusqueda;\r\n    // cambiar la temperatura del clima a kelvin\r\n    let kelvin = 273.15;\r\n\r\n    if(!name) return <h2 className='text-center'>Search Weather</h2>;\r\n\r\n    return (\r\n        <div className=\"card bg-secondary shadow font-weight-bold\">\r\n            <h2 className=\"card-header text-center p-2\">Weather {\"from \" + climaBusqueda.name}</h2>\r\n            <div className=\"card-body bg-light text-dark\">\r\n                <div className=\"card-text\">\r\n                    <p className=\"text-info\">\r\n                        <span className=\"text-capitalize\">{weather[0].description}</span> and the humidity is {main.humidity}%.</p>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <p className=\"m-0 col\">Temp: <br/><span className=\"text-primary\">{ parseInt( main.temp - kelvin, 10 ) } &#x2103;</span></p>\r\n                    <p className=\"m-0 col\">Min: <br/><span className=\"text-primary\">{ parseInt( main.temp_min - kelvin, 10 ) } &#x2103;</span></p>\r\n                    <p className=\"m-0 col\">Max: <br/><span className=\"text-primary\">{ parseInt( main.temp_max - kelvin, 10 ) } &#x2103;</span></p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardClima;","import React, { useState, useEffect } from 'react';\nimport Form from './components/Form';\nimport Alert from './components/Alert';\nimport CardClima from './components/CardClima';\n\nfunction App() {\n\n  const [ciudad, guardarCiudad] = useState(\"\");\n  const [pais, guardarPais] = useState(\"\");\n  const [error, guardarError] = useState(false);\n  const [climaBusqueda, guardarClimaBusqueda] = useState({});\n\n  useEffect(() => {\n    // detectar si el state está vacío para hacer la busqueda\n    if(ciudad === \"\" || pais === \"\") return;\n    const consultarApi = async () => {\n      let token = \"7d569afd4e17320f89f82a6fa1802587\";\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&APPID=${token}`;\n\n      const resultado = await fetch(url);\n      const clima = await resultado.json();\n      guardarClimaBusqueda(clima);\n    }\n    consultarApi();\n  }, [ciudad, pais])\n\n\n  const obtenerDatos = datos => {\n    // obtener datos del formulario\n    if (datos.ciudad === \"\" || datos.pais === \"\") {\n      guardarError(true);\n      return;\n    }\n    guardarCiudad(datos.ciudad);\n    guardarPais(datos.pais);\n    guardarError(false);\n  }\n\n  // cargar componente Alert condicionalmente\n  let component;\n  if (error) {\n    component = <Alert mensaje=\"Field is empty\" tipo=\"danger\"/>\n  } else if (climaBusqueda.cod === \"404\"){\n    component = <Alert mensaje={\"[ \"+ ciudad + \" ] is not found in [\"+ pais +\"]\"} tipo=\"warning\"/>\n  } else {\n    // mostrar clima\n    component = <CardClima climaBusqueda={climaBusqueda} />;\n  }\n\n  return (\n    <div className=\"container-fluid pb-5\">      \n      <h1 className=\"text-center py-2\">WeatherAPP</h1>\n      <div className=\"card bg-dark text-white shadow mx-auto my-4 p-4\" style={{maxWidth:90 + \"vw\"}}>\n        <div className=\"row\">\n          <div className=\"col-md-6 mb-4\">\n            <Form\n              obtenerDatos={obtenerDatos}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            {component}\n          </div>\n        </div>\n      </div>  \n      <div className=\"footer bg-dark fixed-bottom p-2\">\n          <h6 className=\"text-center text-white m-0\">Web made by Adriel Minyety Gonzalez</h6>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}